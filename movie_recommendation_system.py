# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15kHmImKjF2rVTVQ8CtbEfo1-fNcr_mHG

import and preprocessing the given datasets
"""

import pandas as pd
import numpy as np
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

data=pd.read_csv('/content/drive/MyDrive/ml mini projects/movies.csv')

data.head()

data.shape

selectedFeatures = ['genres','keywords','overview','tagline','cast','director']
print(selectedFeatures)

for feature in selectedFeatures:
  data[feature]=data[feature].fillna("")

comFeatures = data['genres']+data['keywords']+data['overview']+data['tagline']+data['cast']+data['director']
print(comFeatures)

vector = TfidfVectorizer()
featureVector = vector.fit_transform(comFeatures)
print(featureVector)

similarity = cosine_similarity(featureVector)
print(similarity)
similarity.shape

"""Now we are moving into recommendation algorithm"""

movieName = input('Enter your favourite movie name: ')

listTitles = data['title'].tolist()
print(listTitles)

findCloseMatch = difflib.get_close_matches(movieName,listTitles)
print(findCloseMatch)

closeMatch=findCloseMatch[0]
print(closeMatch)

movieIndex = data[data.title == closeMatch]['index'].values[0]
print(movieIndex)

similarityScore = list(enumerate(similarity[movieIndex]))
print(similarityScore)

SortedSimilarMovies=sorted(similarityScore, key = lambda x:x[1],reverse=True)
print(SortedSimilarMovies)

print("Movie suggest for you : \n")
i=1
for movie in SortedSimilarMovies:
  index = movie[0]
  titlefromIndex = data[data.index==index]["title"].values[0]
  if(i<=30):
    print(i,".",titlefromIndex)
    i+=1

"""Movie Recommendation System"""

try:
  movieName = input('Enter your favourite movie name: ')

  listTitles = data['title'].tolist()

  findCloseMatch = difflib.get_close_matches(movieName,listTitles)

  closeMatch=findCloseMatch[0]

  movieIndex = data[data.title == closeMatch]['index'].values[0]

  similarityScore = list(enumerate(similarity[movieIndex]))

  SortedSimilarMovies=sorted(similarityScore, key = lambda x:x[1],reverse=True)

  print("Movie suggest for you : \n")
  i=1
  for movie in SortedSimilarMovies:
    index = movie[0]
    titlefromIndex = data[data.index==index]["title"].values[0]
    if(i<=30):
      print(i,".",titlefromIndex)
      i+=1
except:
  print("oops the movie you are searching is not found in the dataset.we will soon update the dataset")