# -*- coding: utf-8 -*-
"""movie_recommendation_system(API).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iXPhqnk7HgFsxV0binWvklEx3xdgmsry
"""

import requests


api_key = '403ee52454f55bec317340281fbd3ca4'
base_url = 'https://api.themoviedb.org/3'

def get_top_movies(criteria='vote_average', top_n=20):
    # Fetch a list of popular movies (you can use other endpoints based on your needs)
    endpoint = f'{base_url}/movie/popular'
    params = {'api_key': api_key, 'language': 'en', 'page': 1}
    response = requests.get(endpoint, params=params)

    if response.status_code == 200:
        movies = sorted(response.json().get('results', []), key=lambda x: x.get(criteria, 0), reverse=True)

        top_movies = movies[:top_n]

        return top_movies
    else:
        return {'error': f'Failed to fetch popular movies. Status code: {response.status_code}'}

def get_movie_details(movie_id):
    endpoint = f'{base_url}/movie/{movie_id}'
    params = {'api_key': api_key}

    response = requests.get(endpoint, params=params)

    if response.status_code == 200:
        movie_data = response.json()
        return movie_data
    else:
        return {'error': f'Failed to fetch movie details. Status code: {response.status_code}'}

def recommend_top_movies(movie_details_cache, criteria='vote_average', top_n=10):

    sorted_movies = sorted(movie_details_cache.values(), key=lambda x: x.get(criteria, 0), reverse=True)

    recommended_movies = sorted_movies[:top_n]

    return recommended_movies

def display_movie_details(movie_details):
    print("Movie Title:", movie_details["title"])
    print("Vote Average:", movie_details["vote_average"])
    print("Vote Count:", movie_details["vote_count"])
    print("Popularity:", movie_details["popularity"])


top_movies = get_top_movies(criteria='vote_average', top_n=20)


movie_details_cache = {}
for movie in top_movies:
    movie_id = movie.get('id')
    movie_details_cache[movie_id] = get_movie_details(movie_id)


recommended_movies = recommend_top_movies(movie_details_cache, criteria='vote_average', top_n=10)


print("Top Recommended Movies:")
for movie_details in recommended_movies:
    display_movie_details(movie_details)
    print("-" * 40)